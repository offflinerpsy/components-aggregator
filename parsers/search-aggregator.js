import chipdip from '../chipdip.js';
import lcsc from './lcsc-parser.js';
import tme from './tme-parser.js';
import farnell from './farnell-parser.js';
import jlcpcb from './jlcpcb-parser.js';
import future from './future-parser.js';
import oemstrade from './oemstrade-parser.js';
import { mergeSearchResults } from './merge.js';
import { normalizeProduct } from './normalize.js';

class SearchAggregator {
    constructor() {
        this.parsers = [
            lcsc,
            tme,
            farnell,
            jlcpcb,
            future,
            oemstrade
        ];
    }

    async search(query, options = {}) {
        const { page = 1, pageSize = 20, useFallback = true } = options;
        
        try {
            console.log(`üîç –ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫: ${query} (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ ${page}, —Ä–∞–∑–º–µ—Ä ${pageSize})`);
            
            // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º ChipDip
            let chipdipResults = await chipdip.search(query);
            console.log(`üì¶ ChipDip: –Ω–∞–π–¥–µ–Ω–æ ${chipdipResults.length} —Ç–æ–≤–∞—Ä–æ–≤`);
            
            // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ChipDip –≤ –∫–∞–Ω–æ–Ω
            let results = chipdipResults.map(item => this.normalizeChipDipResult(item));
            
            // 2. –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –º–∞–ª–æ –∏–ª–∏ –ø—É—Å—Ç–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±—ç–∫ –∫ –ø–∞—Ä—Å–µ—Ä–∞–º
            if (useFallback && results.length < 5) {
                console.log(`üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ–ª–±—ç–∫ –∫ –ø–∞—Ä—Å–µ—Ä–∞–º (–Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${results.length} —Ç–æ–≤–∞—Ä–æ–≤)`);
                
                const fallbackResults = await this.searchFallback(query);
                console.log(`üì¶ –§–æ–ª–±—ç–∫: –Ω–∞–π–¥–µ–Ω–æ ${fallbackResults.length} —Ç–æ–≤–∞—Ä–æ–≤`);
                
                // –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                const allResults = [...results, ...fallbackResults];
                results = mergeSearchResults(allResults);
                console.log(`üì¶ –ü–æ—Å–ª–µ —Å–ª–∏—è–Ω–∏—è: ${results.length} —Ç–æ–≤–∞—Ä–æ–≤`);
            }
            
            // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
            const startIndex = (page - 1) * pageSize;
            const endIndex = startIndex + pageSize;
            const paginatedResults = results.slice(startIndex, endIndex);
            
            return {
                items: paginatedResults,
                total: results.length,
                page,
                pageSize,
                hasMore: endIndex < results.length
            };
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:', error);
            return {
                items: [],
                total: 0,
                page,
                pageSize,
                hasMore: false,
                error: error.message
            };
        }
    }

    async searchFallback(query) {
        const promises = this.parsers.map(parser => 
            parser.search(query).catch(error => {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–µ—Ä–∞ ${parser.name}:`, error.message);
                return [];
            })
        );
        
        const results = await Promise.all(promises);
        return results.flat();
    }

    normalizeChipDipResult(item) {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º MPN –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ URL
        const mpn = this.extractMPN(item.name || '');
        
        // –ü–∞—Ä—Å–∏–º —Ü–µ–Ω—É
        const pricing = [];
        if (item.price && item.price.value) {
            pricing.push({
                qty: 1,
                price: item.price.value,
                currency: 'RUB',
                supplier: 'ChipDip'
            });
        }
        
        // –ü–∞—Ä—Å–∏–º –Ω–∞–ª–∏—á–∏–µ
        const availability = this.parseChipDipStock(item.stock || '');
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ—Ä–ø—É—Å –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        const packageInfo = this.extractPackage(item.name || '');
        
        return {
            mpn,
            description: item.name || '',
            images: item.image ? [item.image] : [],
            datasheets: [],
            availability,
            pricing,
            package: packageInfo,
            packaging: null,
            url: item.url || null,
            suppliers: [{
                name: 'ChipDip',
                url: 'https://www.chipdip.ru',
                inStock: availability.inStock,
                pricing: pricing
            }],
            technical_specs: {
                manufacturer: item.manufacturer || null
            }
        };
    }

    extractMPN(name) {
        // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è MPN –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è
        const words = name.split(/\s+/);
        for (const word of words) {
            if (word.match(/^[A-Z0-9-]+$/)) {
                return word;
            }
        }
        return name.split(/\s+/)[0] || '';
    }

    parseChipDipStock(stockStr) {
        if (!stockStr) return { inStock: 0, lead: null };
        
        const stock = stockStr.toLowerCase();
        if (stock.includes('–Ω–µ—Ç') || stock.includes('no')) {
            return { inStock: 0, lead: null };
        }
        
        const match = stock.match(/(\d+)\s*—à—Ç/);
        if (match) {
            return { inStock: parseInt(match[1]), lead: null };
        }
        
        return { inStock: 0, lead: stockStr };
    }

    extractPackage(name) {
        const packagePatterns = [
            /TO-?(\d+)/i,
            /SOT-?(\d+)/i,
            /DIP-?(\d+)/i,
            /SOIC-?(\d+)/i,
            /QFN-?(\d+)/i,
            /BGA-?(\d+)/i,
            /TSSOP-?(\d+)/i,
            /MSOP-?(\d+)/i,
            /DFN-?(\d+)/i,
            /LFCSP-?(\d+)/i
        ];
        
        for (const pattern of packagePatterns) {
            const match = name.match(pattern);
            if (match) {
                return match[0];
            }
        }
        
        return null;
    }
}

export default new SearchAggregator();
