#!/usr/bin/env node

/**
 * üöî –°–ö–†–ò–ü–¢ –û–¢–ü–†–ê–í–ö–ò –ö–û–ú–ê–ù–î –û–¢ –ö–û–û–†–î–ò–ù–ê–¢–û–†–ê
 * 
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—ã —á–∞—Ç–∞–º
 */

const COORDINATOR_URL = 'http://localhost:3001';

class CommandSender {
    constructor() {
        this.coordinatorUrl = COORDINATOR_URL;
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–º–∞–Ω–¥—É —á–∞—Ç—É
     */
    async sendCommand(chatId, command, instructions = [], priority = 'normal') {
        try {
            const response = await fetch(`${this.coordinatorUrl}/api/command`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    chatId,
                    command,
                    instructions,
                    priority
                })
            });

            const result = await response.json();
            
            if (result.status === 'success') {
                console.log(`‚úÖ –ö–û–ú–ê–ù–î–ê –û–¢–ü–†–ê–í–õ–ï–ù–ê: ${chatId} - ${command}`);
                console.log(`üìã ID –∫–æ–º–∞–Ω–¥—ã: ${result.commandId}`);
                return result;
            } else {
                console.error(`‚ùå –û–®–ò–ë–ö–ê –û–¢–ü–†–ê–í–ö–ò: ${result.message}`);
                return null;
            }
        } catch (error) {
            console.error(`‚ùå –û–®–ò–ë–ö–ê –°–í–Ø–ó–ò: ${error.message}`);
            return null;
        }
    }

    /**
     * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Ç–∞
     */
    async getCommands(chatId) {
        try {
            const response = await fetch(`${this.coordinatorUrl}/api/commands/${chatId}`);
            const result = await response.json();
            
            if (result.status === 'success') {
                console.log(`üìã –ö–û–ú–ê–ù–î–´ –î–õ–Ø ${chatId}:`);
                result.commands.forEach(cmd => {
                    console.log(`  - ${cmd.id}: ${cmd.command} (${cmd.status})`);
                });
                return result.commands;
            } else {
                console.error(`‚ùå –û–®–ò–ë–ö–ê –ü–û–õ–£–ß–ï–ù–ò–Ø –ö–û–ú–ê–ù–î: ${result.message}`);
                return [];
            }
        } catch (error) {
            console.error(`‚ùå –û–®–ò–ë–ö–ê –°–í–Ø–ó–ò: ${error.message}`);
            return [];
        }
    }

    /**
     * –û—Ç–º–µ—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
     */
    async completeCommand(commandId, result = '–í—ã–ø–æ–ª–Ω–µ–Ω–æ', status = 'completed') {
        try {
            const response = await fetch(`${this.coordinatorUrl}/api/commands/${commandId}/complete`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    result,
                    status
                })
            });

            const responseData = await response.json();
            
            if (responseData.status === 'success') {
                console.log(`‚úÖ –ö–û–ú–ê–ù–î–ê –û–¢–ú–ï–ß–ï–ù–ê –ö–ê–ö –í–´–ü–û–õ–ù–ï–ù–ù–ê–Ø: ${commandId}`);
                return responseData;
            } else {
                console.error(`‚ùå –û–®–ò–ë–ö–ê –û–¢–ú–ï–¢–ö–ò: ${responseData.message}`);
                return null;
            }
        } catch (error) {
            console.error(`‚ùå –û–®–ò–ë–ö–ê –°–í–Ø–ó–ò: ${error.message}`);
            return null;
        }
    }
}

// –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    const sender = new CommandSender();
    
    const command = process.argv[2];
    const chatId = process.argv[3];
    const commandText = process.argv[4];
    const instructions = process.argv.slice(5);
    
    switch (command) {
        case 'send':
            if (!chatId || !commandText) {
                console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node send_command.js send <chatId> <command> [instructions...]');
                process.exit(1);
            }
            sender.sendCommand(chatId, commandText, instructions);
            break;
            
        case 'get':
            if (!chatId) {
                console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node send_command.js get <chatId>');
                process.exit(1);
            }
            sender.getCommands(chatId);
            break;
            
        case 'complete':
            const commandId = process.argv[3];
            const result = process.argv[4] || '–í—ã–ø–æ–ª–Ω–µ–Ω–æ';
            if (!commandId) {
                console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node send_command.js complete <commandId> [result]');
                process.exit(1);
            }
            sender.completeCommand(commandId, result);
            break;
            
        default:
            console.log('üöî –ö–û–ú–ê–ù–î–´ –ö–û–û–†–î–ò–ù–ê–¢–û–†–ê:');
            console.log('  send <chatId> <command> [instructions...] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É');
            console.log('  get <chatId> - –ø–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —á–∞—Ç–∞');
            console.log('  complete <commandId> [result] - –æ—Ç–º–µ—Ç–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é');
    }
}

module.exports = CommandSender;