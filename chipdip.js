import axios from 'axios';
import cheerio from "cheerio";
import path from "path";
import { promises as fs } from "fs";
import db from "./db.js";

class ChipDipParser {
    constructor() {
        this.baseUrl = "https://www.chipdip.ru";
        this.userAgent = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) Chrome/119.0.0.0 Safari/537.36";

        // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —É—Å—Ç–∞—Ä–µ–≤–∞–Ω–∏—è –∫—ç—à–∞
        db.on('search_stale', async ({ query, age }) => {
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –≤ —Ñ–æ–Ω–µ: ${query} (–≤–æ–∑—Ä–∞—Å—Ç: ${age}—Å)`);
            try {
                const results = await this.fetchSearchResults(query);
                await db.cacheSearchResults(query, results, true);
                await db.resetUpdatingFlag('search', query);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞:', error);
                await db.resetUpdatingFlag('search', query);
            }
        });

        db.on('product_stale', async ({ url, age }) => {
            console.log(`üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞ –≤ —Ñ–æ–Ω–µ: ${url} (–≤–æ–∑—Ä–∞—Å—Ç: ${age}—Å)`);
            try {
                const product = await this.fetchProduct(url);
                await db.cacheProduct(url, product, true);
                await db.resetUpdatingFlag('product', url);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
                await db.resetUpdatingFlag('product', url);
            }
        });
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –≤ —á–∏—Å–ª–æ–≤–æ–π —Ñ–æ—Ä–º–∞—Ç
    parsePrice(priceStr) {
        if (!priceStr) return null;
        const matches = priceStr.match(/[\d.,]+/);
        if (!matches) return null;
        return parseFloat(matches[0].replace(",", "."));
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–∞
    parseCategories($) {
        const categories = [];
        $(".breadcrumbs a").each((_, el) => {
            const category = $(el).text().trim();
            if (category && category !== "–ì–ª–∞–≤–Ω–∞—è") {
                categories.push(category);
            }
        });
        return categories;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–∞
    parseRating($) {
        const ratingText = $(".product__rating .rating__value").text().trim();
        const ratingMatch = ratingText.match(/[\d.]+/);
        return ratingMatch ? parseFloat(ratingMatch[0]) : null;
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ—Ç–∑—ã–≤–æ–≤
    parseReviewCount($) {
        const reviewText = $(".product__rating .rating__count").text().trim();
        const reviewMatch = reviewText.match(/\d+/);
        return reviewMatch ? parseInt(reviewMatch[0]) : 0;
    }

    // –†–∞—Å—á–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞ –¥–ª—è –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
    calculateRelevance(product, searchTerms) {
        let score = 0;
        const text = [
            product.name,
            product.manufacturer,
            product.code
        ].join(' ').toLowerCase();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º
        if (product.code && searchTerms.some(term => product.code.toLowerCase() === term)) {
            score += 1000; // –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º
        if (product.code && searchTerms.some(term => product.code.toLowerCase().includes(term))) {
            score += 500;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–º
        searchTerms.forEach(term => {
            // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å–ª–æ–≤–∞
            const wordMatch = new RegExp(`\\b${term}\\b`, 'i');
            if (text.match(wordMatch)) {
                score += 100;
            }
            
            // –ß–∞—Å—Ç–∏—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
            if (text.includes(term)) {
                score += 50;
            }
        });

        // –ë–æ–Ω—É—Å –∑–∞ –∫–æ—Ä–æ—Ç–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –æ–Ω–æ –±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ)
        score += Math.max(0, 100 - product.name.length);

        // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã
        if (product.price && product.price.value) {
            score += 10;
        }

        // –ë–æ–Ω—É—Å –∑–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞
        if (product.stock && !product.stock.toLowerCase().includes('–Ω–µ—Ç')) {
            score += 20;
        }

        return score;
    }

    // –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤
    async search(query) {
        try {
            console.log(`üîç –ü–æ–∏—Å–∫: ${query}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cached = await db.getSearchResults(query, { maxAge: 3600, allowStale: true });
            if (cached) {
                console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ ${cached.results.length} —Ç–æ–≤–∞—Ä–æ–≤ (–≤–æ–∑—Ä–∞—Å—Ç: ${cached.age}—Å)`);
                if (cached.isStale) {
                    console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–æ–Ω–µ');
                }
                return cached.results;
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
            const results = await this.fetchSearchResults(query);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            if (results.length > 0) {
                await db.cacheSearchResults(query, results);
                console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à`);
            }
            
            return results;
            
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:", error.message);
            if (error.response) {
                console.error("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", error.response.status);
                console.error("–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", error.response.data);
            }
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
    async getProduct(url) {
        try {
            console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${url}`);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            const cached = await db.getProduct(url, { maxAge: 3600, allowStale: true });
            if (cached) {
                console.log(`üì¶ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ (–≤–æ–∑—Ä–∞—Å—Ç: ${cached.age}—Å)`);
                if (cached.isStale) {
                    console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –±—É–¥—É—Ç –æ–±–Ω–æ–≤–ª–µ–Ω—ã –≤ —Ñ–æ–Ω–µ');
                }
                return cached.data;
            }
            
            // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
            const product = await this.fetchProduct(url);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            try {
                await db.cacheProduct(url, product);
                console.log(`üíæ –¢–æ–≤–∞—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: ${product.name}`);
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –∫—ç—à:', error);
            }
            
            return product;
            
        } catch (error) {
            console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:", error.message);
            if (error.response) {
                console.error("–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞:", error.response.status);
                console.error("–î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞:", error.response.data);
            }
            return null;
        }
    }

    // –ó–∞–ø—Ä–æ—Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
    async fetchSearchResults(query) {
        const searchUrl = `${this.baseUrl}/search?searchtext=${encodeURIComponent(query)}`;
        console.log(`üåê URL –ø–æ–∏—Å–∫–∞: ${searchUrl}`);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π –ø—Ä–æ–∫—Å–∏
        const response = await axios.get(`http://localhost:8002/proxy/search?q=${encodeURIComponent(query)}`, {
            timeout: 10000,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–∫—Å–∏`);
        
        // –ü—Ä–æ–∫—Å–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ –≥–æ—Ç–æ–≤—ã–π JSON —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        const products = response.data;
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${products.length}`);
        
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        if (products.length > 0) {
            const searchTerms = query.toLowerCase().split(/\s+/);
            
            products.sort((a, b) => {
                const aScore = this.calculateRelevance(a, searchTerms);
                const bScore = this.calculateRelevance(b, searchTerms);
                return bScore - aScore;
            });
        }
        
        return products;
    }

    // –ó–∞–ø—Ä–æ—Å –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
    async fetchProduct(url) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–Ω–µ—à–Ω–∏–π –ø—Ä–æ–∫—Å–∏
        const response = await axios.get(`http://localhost:8002/proxy/product?url=${encodeURIComponent(url)}`, {
            timeout: 10000,
            headers: {
                'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36'
            }
        });
        console.log(`‚úÖ –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –ø—Ä–æ–∫—Å–∏`);
        
        // –ü—Ä–æ–∫—Å–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —É–∂–µ –≥–æ—Ç–æ–≤—ã–π JSON —Å –¥–∞–Ω–Ω—ã–º–∏ —Ç–æ–≤–∞—Ä–∞
        const product = response.data;
        console.log("‚ú® –ü–æ–ª—É—á–µ–Ω —Ç–æ–≤–∞—Ä:", product.name);
        console.log("üîç –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö:", typeof product);
        
        // –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤—Å–µ –ø–æ–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —Å–µ—Ä–∏–∞–ª–∏–∑—É—é—Ç—Å—è
        if (typeof product === 'object' && product !== null) {
            try {
                const cleanProduct = JSON.parse(JSON.stringify(product));
                console.log("‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω");
                return cleanProduct;
            } catch (error) {
                console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–æ–≤–∞—Ä–∞:", error);
                return product;
            }
        }
        
        return product;
    }
}

export default new ChipDipParser();