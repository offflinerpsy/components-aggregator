const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');
const crypto = require('crypto');

class PDFCache {
    constructor() {
        this.cacheDir = path.join(__dirname, 'public', 'cache', 'pdf');
        this.init();
    }

    async init() {
        try {
            await fs.mkdir(this.cacheDir, { recursive: true });
            console.log('‚úÖ PDF –∫—ç—à –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ PDF –∫—ç—à–∞:', error);
        }
    }

    generateFileName(url) {
        const hash = crypto.createHash('md5').update(url).digest('hex');
        return `${hash}.pdf`;
    }

    async downloadPDF(url) {
        const fileName = this.generateFileName(url);
        const filePath = path.join(this.cacheDir, fileName);

        try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            try {
                await fs.access(filePath);
                console.log(`üìÑ PDF –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ: ${fileName}`);
                return `/cache/pdf/${fileName}`;
            } catch {
                // –§–∞–π–ª–∞ –Ω–µ—Ç –≤ –∫—ç—à–µ
            }

            // –°–∫–∞—á–∏–≤–∞–µ–º PDF
            console.log(`üì• –°–∫–∞—á–∏–≤–∞–µ–º PDF: ${url}`);
            const response = await axios({
                method: 'get',
                url: url,
                responseType: 'arraybuffer'
            });

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
            await fs.writeFile(filePath, response.data);
            console.log(`üíæ PDF —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –∫—ç—à: ${fileName}`);

            return `/cache/pdf/${fileName}`;
        } catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ PDF ${url}:`, error);
            throw error;
        }
    }
}

module.exports = new PDFCache();
