const axios = require('axios');
const fs = require('fs').promises;
const path = require('path');

// –°–ª—É—á–∞–π–Ω—ã–µ –ø–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const searchQueries = [
    '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä',
    '—Ä–µ–∑–∏—Å—Ç–æ—Ä',
    '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä',
    '–¥–∏–æ–¥',
    '–º–∏–∫—Ä–æ—Å—Ö–µ–º–∞',
    '—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä',
    '–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å',
    '–¥–∞—Ç—á–∏–∫',
    '—Ä–µ–ª–µ',
    '–∏–Ω–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å'
];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
function getRandomItem(array) {
    return array[Math.floor(Math.random() * array.length)];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
async function log(message, type = 'info') {
    const timestamp = new Date().toISOString();
    const logMessage = `[${timestamp}] [${type}] ${message}\n`;
    
    console.log(logMessage.trim());
    
    await fs.appendFile(
        path.join(__dirname, '..', 'test_results.log'),
        logMessage
    );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞
async function testSearch(query) {
    try {
        const response = await axios.get(`http://localhost/api/search?q=${encodeURIComponent(query)}`);
        await log(`–ü–æ–∏—Å–∫ "${query}": –ù–∞–π–¥–µ–Ω–æ ${response.data.results.length} —Ç–æ–≤–∞—Ä–æ–≤`);
        return response.data.results;
    } catch (error) {
        await log(`–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ "${query}": ${error.message}`, 'error');
        return [];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞
async function testProductCard(product) {
    try {
        // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ API
        const apiResponse = await axios.get(`http://localhost/api/product?url=${encodeURIComponent(product.url)}`);
        
        if (!apiResponse.data || !apiResponse.data.data) {
            await log(`–¢–æ–≤–∞—Ä ${product.name}: API –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç`, 'error');
            return false;
        }

        const productData = apiResponse.data.data;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –≤ API-–æ—Ç–≤–µ—Ç–µ
        const requiredFields = ['name', 'manufacturer', 'price', 'description'];
        const missingFields = requiredFields.filter(field => !productData[field]);
        
        if (missingFields.length > 0) {
            await log(`–¢–æ–≤–∞—Ä ${product.name}: –≤ API –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è ${missingFields.join(', ')}`, 'warning');
        } else {
            await log(`–¢–æ–≤–∞—Ä ${product.name}: API –≤–µ—Ä–Ω—É–ª –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ API-–æ—Ç–≤–µ—Ç–µ
        if (productData.images && productData.images.length > 0) {
            await log(`–¢–æ–≤–∞—Ä ${product.name}: API –≤–µ—Ä–Ω—É–ª ${productData.images.length} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π`);
        }
        
        if (productData.docs && productData.docs.length > 0) {
            await log(`–¢–æ–≤–∞—Ä ${product.name}: API –≤–µ—Ä–Ω—É–ª ${productData.docs.length} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤`);
        }

        // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—É
        const pageResponse = await axios.get(`http://localhost/product?url=${encodeURIComponent(product.url)}`);
        
        if (pageResponse.status !== 200) {
            await log(`–¢–æ–≤–∞—Ä ${product.name}: –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è HTML-—Å—Ç—Ä–∞–Ω–∏—Ü—ã (—Å—Ç–∞—Ç—É—Å ${pageResponse.status})`, 'error');
            return false;
        }

        if (!pageResponse.data || typeof pageResponse.data !== 'string') {
            await log(`–¢–æ–≤–∞—Ä ${product.name}: HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç`, 'error');
            return false;
        }

        await log(`–¢–æ–≤–∞—Ä ${product.name}: HTML-—Å—Ç—Ä–∞–Ω–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞`);
        return true;

    } catch (error) {
        await log(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞ ${product.name}: ${error.message}`, 'error');
        return false;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runTests() {
    await log('üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
    
    let totalProducts = 0;
    let successfulProducts = 0;
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    for (const query of searchQueries) {
        await log(`\nüìù –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: ${query}`);
        
        const products = await testSearch(query);
        if (products.length === 0) {
            await log(`‚ùå –ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è "${query}"`, 'warning');
            continue;
        }

        // –ë–µ—Ä–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Ç–æ–≤–∞—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const randomProduct = getRandomItem(products);
        totalProducts++;
        
        await log(`\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–æ–≤–∞—Ä–∞: ${randomProduct.name}`);
        const success = await testProductCard(randomProduct);
        if (success) successfulProducts++;

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 1000));
    }

    // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    await log('\nüìä –ò—Ç–æ–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
    await log(`–í—Å–µ–≥–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: ${totalProducts}`);
    await log(`–£—Å–ø–µ—à–Ω–æ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–æ: ${successfulProducts}`);
    await log(`–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: ${((successfulProducts / totalProducts) * 100).toFixed(2)}%`);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
runTests().catch(async error => {
    await log(`‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: ${error.message}`, 'error');
    process.exit(1);
});