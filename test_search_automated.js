#!/usr/bin/env node

const axios = require('axios');
const fs = require('fs').promises;

// –°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ - —Ä–µ–∞–ª—å–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–æ–≤ (—Ä—É—Å—Å–∫–∏–π + –∞–Ω–≥–ª–∏–π—Å–∫–∏–π)
const testQueries = [
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –º–∏–∫—Ä–æ—Å—Ö–µ–º—ã (—Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
    'LM317', 'LM358', 'NE555', 'LM393', 'TL072', 'LM324',
    
    // –¢—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä—ã
    '2N2222', 'BC547', 'IRF540', 'TIP122', 'BD139', 
    
    // –ú–∏–∫—Ä–æ–∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã
    'STM32F103', 'ATmega328', 'ESP32', 'PIC16F',
    
    // –î–∏–æ–¥—ã –∏ —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã
    '1N4007', 'BAT54', 'Schottky',
    
    // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    'LDD-700L', 'LDD-350L', 'LDB-500L', 
    
    // –†—É—Å—Å–∫–∏–µ —Ç–µ—Ä–º–∏–Ω—ã - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤
    '—Ä–µ–∑–∏—Å—Ç–æ—Ä', '–∫–æ–Ω–¥–µ–Ω—Å–∞—Ç–æ—Ä', '—Ç—Ä–∞–Ω–∑–∏—Å—Ç–æ—Ä', '–¥–∏–æ–¥', '—Å–≤–µ—Ç–æ–¥–∏–æ–¥',
    '–º–∏–∫—Ä–æ—Å—Ö–µ–º–∞', '—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ç–æ—Ä', '—Ä–µ–≥—É–ª—è—Ç–æ—Ä', '—É—Å–∏–ª–∏—Ç–µ–ª—å',
    '—Ä–µ–ª–µ', '–∫–Ω–æ–ø–∫–∞', '–ø–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å', '—Ä–∞–∑—ä–µ–º', '—Å–æ–µ–¥–∏–Ω–∏—Ç–µ–ª—å',
    '—Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä', '–¥—Ä–æ—Å—Å–µ–ª—å', '–∫–∞—Ç—É—à–∫–∞', '–ø—Ä–µ–¥–æ—Ö—Ä–∞–Ω–∏—Ç–µ–ª—å',
    '–ø–æ—Ç–µ–Ω—Ü–∏–æ–º–µ—Ç—Ä', '–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π —Ä–µ–∑–∏—Å—Ç–æ—Ä', '–∫–≤–∞—Ä—Ü', '–≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
    
    // –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —Å–µ—Ä–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    '–ö–¢315', '–ö–¢817', '1–ù4148', '–ö–†142–ï–ù', '–ö561–õ–ê7',
    '–ö–î522', '–ê–õ–°324', '–ö–ü303', '–ö–¢973',
    
    // –ù–æ–º–∏–Ω–∞–ª—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
    '10–∫–û–º', '100–º–∫–§', '1–Ω–§', '5–í', '12–í', '220–í',
    '1–ê', '10–ê', '0.5–í—Ç', '1–í—Ç', '5–í—Ç',
    
    // –ö–æ—Ä–ø—É—Å–∞
    'TO-220', 'SO-8', 'DIP-8', 'SMD', 'QFP',
    
    // –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ/–≥—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–ª—É—á–∞–∏
    'a', '–∞–∞', '123', 'xyz', '!!!', '—Ç–µ—Å—Ç', '–∞–±–≤–≥–¥',
    '', ' ', '–æ—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫–æ—Ç–æ—Ä—ã–π –Ω–µ –¥–æ–ª–∂–µ–Ω –Ω–∞–π—Ç–∏ –Ω–∏—á–µ–≥–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ'
];

const BASE_URL = 'http://89.104.69.77';
const LOG_FILE = 'search_test_results.log';
const DELAY_BETWEEN_TESTS = 2000; // 2 —Å–µ–∫—É–Ω–¥—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

class SearchTester {
    constructor() {
        this.results = [];
        this.startTime = new Date();
        this.logStream = null;
    }

    async init() {
        await this.log(`üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∏—Å–∫–∞`);
        await this.log(`‚è∞ –í—Ä–µ–º—è —Å—Ç–∞—Ä—Ç–∞: ${this.startTime.toISOString()}`);
        await this.log(`üéØ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ—Å—Ç–æ–≤: ${testQueries.length}`);
        await this.log(`üåê –°–µ—Ä–≤–µ—Ä: ${BASE_URL}`);
        await this.log(`‚è±Ô∏è –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏: ${DELAY_BETWEEN_TESTS}ms`);
        await this.log(`${'='.repeat(80)}\n`);
    }

    async log(message) {
        const timestamp = new Date().toISOString();
        const logLine = `[${timestamp}] ${message}\n`;
        
        console.log(message);
        await fs.appendFile(LOG_FILE, logLine);
    }

    async testSearch(query) {
        const testStart = Date.now();
        const result = {
            query,
            success: false,
            responseTime: 0,
            resultCount: 0,
            error: null,
            timestamp: new Date().toISOString()
        };

        try {
            await this.log(`üîç –¢–µ—Å—Ç–∏—Ä—É—é –∑–∞–ø—Ä–æ—Å: "${query}"`);
            
            const response = await axios.get(`${BASE_URL}/api/search`, {
                params: { q: query },
                timeout: 30000,
                headers: {
                    'User-Agent': 'SearchTester/1.0'
                }
            });

            result.responseTime = Date.now() - testStart;
            
            if (response.status === 200 && response.data) {
                const data = response.data;
                result.success = true;
                result.resultCount = data.results ? data.results.length : 0;
                
                if (result.resultCount > 0) {
                    await this.log(`  ‚úÖ –£—Å–ø–µ—Ö! –ù–∞–π–¥–µ–Ω–æ ${result.resultCount} —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ ${result.responseTime}ms`);
                    
                    // –õ–æ–≥–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
                    const sampleResults = data.results.slice(0, 3);
                    for (const item of sampleResults) {
                        await this.log(`    üì¶ ${item.name || '–ë–ï–ó –ù–ê–ó–í–ê–ù–ò–Ø'} - ${item.price?.display || '–ë–ï–ó –¶–ï–ù–´'} (${item.manufacturer || '–ë–ï–ó –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–Ø'})`);
                    }
                } else {
                    await this.log(`  ‚ö†Ô∏è  –ü—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞ ${result.responseTime}ms`);
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –±–∞–≥–∏
                await this.checkForBugs(query, data);
                
            } else {
                result.error = `–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å: ${response.status}`;
                await this.log(`  ‚ùå –û—à–∏–±–∫–∞: ${result.error}`);
            }

        } catch (error) {
            result.responseTime = Date.now() - testStart;
            result.error = error.message;
            await this.log(`  üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ${error.message} (${result.responseTime}ms)`);
            
            if (error.response) {
                await this.log(`    HTTP Status: ${error.response.status}`);
                await this.log(`    Response: ${JSON.stringify(error.response.data).substring(0, 200)}`);
            }
        }

        this.results.push(result);
        await this.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
        return result;
    }

    async checkForBugs(query, data) {
        const bugs = [];
        
        if (!data.results || !Array.isArray(data.results)) {
            bugs.push('results –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –º–∞—Å—Å–∏–≤–æ–º');
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä –Ω–∞ –±–∞–≥–∏
            data.results.forEach((item, index) => {
                if (!item.name || item.name.trim() === '') {
                    bugs.push(`–¢–æ–≤–∞—Ä #${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ`);
                }
                if (!item.price || !item.price.display) {
                    bugs.push(`–¢–æ–≤–∞—Ä #${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ü–µ–Ω–∞`);
                }
                if (!item.url) {
                    bugs.push(`–¢–æ–≤–∞—Ä #${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç URL`);
                }
                if (!item.manufacturer || item.manufacturer.trim() === '') {
                    bugs.push(`–¢–æ–≤–∞—Ä #${index + 1}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å`);
                }
            });
        }

        if (bugs.length > 0) {
            await this.log(`  üêõ –ù–ê–ô–î–ï–ù–´ –ë–ê–ì–ò –≤ –∑–∞–ø—Ä–æ—Å–µ "${query}":`);
            for (const bug of bugs) {
                await this.log(`    - ${bug}`);
            }
        }
    }

    async runAllTests() {
        await this.init();
        
        for (let i = 0; i < testQueries.length; i++) {
            const query = testQueries[i];
            const progress = `${i + 1}/${testQueries.length}`;
            
            await this.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progress} - –ó–∞–ø—Ä–æ—Å "${query}"`);
            await this.testSearch(query);
            
            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç–µ—Å—Ç–∞–º–∏
            if (i < testQueries.length - 1) {
                await this.log(`‚è≥ –ü–∞—É–∑–∞ ${DELAY_BETWEEN_TESTS}ms...`);
                await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_TESTS));
            }
        }

        await this.generateReport();
    }

    async generateReport() {
        const endTime = new Date();
        const totalTime = endTime - this.startTime;
        
        const successful = this.results.filter(r => r.success).length;
        const failed = this.results.filter(r => !r.success).length;
        const withResults = this.results.filter(r => r.resultCount > 0).length;
        const emptyResults = this.results.filter(r => r.success && r.resultCount === 0).length;
        
        const avgResponseTime = this.results
            .filter(r => r.responseTime > 0)
            .reduce((sum, r) => sum + r.responseTime, 0) / this.results.length;

        await this.log(`\n${'='.repeat(80)}`);
        await this.log(`üìà –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢`);
        await this.log(`${'='.repeat(80)}`);
        await this.log(`‚è∞ –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${Math.round(totalTime / 1000)}—Å`);
        await this.log(`üìä –í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: ${this.results.length}`);
        await this.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö: ${successful} (${Math.round(successful / this.results.length * 100)}%)`);
        await this.log(`‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö: ${failed} (${Math.round(failed / this.results.length * 100)}%)`);
        await this.log(`üì¶ –° —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏: ${withResults} (${Math.round(withResults / this.results.length * 100)}%)`);
        await this.log(`üö´ –ü—É—Å—Ç—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: ${emptyResults} (${Math.round(emptyResults / this.results.length * 100)}%)`);
        await this.log(`‚ö° –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞: ${Math.round(avgResponseTime)}ms`);

        // –¢–æ–ø —Å–∞–º—ã—Ö –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const slowest = [...this.results]
            .sort((a, b) => b.responseTime - a.responseTime)
            .slice(0, 5);
        
        await this.log(`\nüêå –¢–û–ü-5 –°–ê–ú–´–• –ú–ï–î–õ–ï–ù–ù–´–• –ó–ê–ü–†–û–°–û–í:`);
        slowest.forEach((result, index) => {
            this.log(`  ${index + 1}. "${result.query}" - ${result.responseTime}ms`);
        });

        // –¢–æ–ø —Å–∞–º—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        const mostResults = [...this.results]
            .sort((a, b) => b.resultCount - a.resultCount)
            .slice(0, 5);
        
        await this.log(`\nüèÜ –¢–û–ü-5 –ó–ê–ü–†–û–°–û–í –° –ù–ê–ò–ë–û–õ–¨–®–ò–ú –ö–û–õ–ò–ß–ï–°–¢–í–û–ú –†–ï–ó–£–õ–¨–¢–ê–¢–û–í:`);
        mostResults.forEach((result, index) => {
            this.log(`  ${index + 1}. "${result.query}" - ${result.resultCount} —Ç–æ–≤–∞—Ä–æ–≤`);
        });

        // –û—à–∏–±–∫–∏
        const errors = this.results.filter(r => r.error);
        if (errors.length > 0) {
            await this.log(`\nüí• –û–®–ò–ë–ö–ò (${errors.length}):`);
            errors.forEach(result => {
                this.log(`  "${result.query}": ${result.error}`);
            });
        }

        await this.log(`\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: ${LOG_FILE}`);
        await this.log(`üìÑ –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ: cat ${LOG_FILE} | grep "üêõ\\|üí•\\|‚ö†Ô∏è"`);
    }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if (require.main === module) {
    const tester = new SearchTester();
    tester.runAllTests().catch(error => {
        console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
        process.exit(1);
    });
}

module.exports = SearchTester;
