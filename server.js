import express from 'express';
import axios from 'axios';
import path from 'path';
import { fileURLToPath } from 'url';
import chipdip from './chipdip.js';
import db from './db.js';
import template from './template.js';
import productV2 from './src/server/routes/product_v2.js';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const PORT = 80;

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
app.use(express.static('public'));

// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
app.get('/privacy', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'privacy.html'));
});

app.get('/about', (req, res) => {
    res.send('<h1>–û –Ω–∞—Å</h1><p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p><a href="/">‚Üê –ù–∞–∑–∞–¥</a>');
});

app.get('/delivery', (req, res) => {
    res.send('<h1>–î–æ—Å—Ç–∞–≤–∫–∞</h1><p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p><a href="/">‚Üê –ù–∞–∑–∞–¥</a>');
});

app.get('/contacts', (req, res) => {
    res.send('<h1>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h1><p>–°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</p><a href="/">‚Üê –ù–∞–∑–∞–¥</a>');
});

// API –¥–ª—è –ø–æ–∏—Å–∫–∞
app.get('/api/search', async (req, res) => {
    try {
        const query = req.query.q;
        if (!query || query.length < 2) {
            return res.status(400).json({
                error: '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞',
                query,
                results: [],
                total: 0,
                timestamp: new Date().toISOString()
            });
        }

        console.log(`üîç –ü–æ–∏—Å–∫: ${query}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cachedResults = await db.getSearchResults(query, { maxAge: 3600, allowStale: true });
        if (cachedResults) {
            console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ –≤ –∫—ç—à–µ ${cachedResults.results.length} —Ç–æ–≤–∞—Ä–æ–≤ (–≤–æ–∑—Ä–∞—Å—Ç: ${cachedResults.age}—Å)`);
            
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (cachedResults.isStale) {
                console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ');
                chipdip.search(query).catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
                });
            }
            
            return res.json({
                query,
                results: cachedResults.results,
                total: cachedResults.results.length,
                timestamp: cachedResults.timestamp,
                from_cache: true,
                age: cachedResults.age
            });
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        const results = await chipdip.search(query);
        
        res.json({
            query,
            results,
            total: results.length,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Ç–æ–≤–∞—Ä–æ–≤',
            details: error.message,
            query: req.query.q,
            results: [],
            total: 0,
            timestamp: new Date().toISOString()
        });
    }
});

// API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
app.get('/api/product', async (req, res) => {
    try {
        const url = req.query.url;
        if (!url) {
            return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω URL —Ç–æ–≤–∞—Ä–∞' });
        }

        if (!url.startsWith('https://www.chipdip.ru/')) {
            return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π URL' });
        }

        console.log(`üì¶ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞: ${url}`);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        const cachedProduct = await db.getProduct(url, { maxAge: 3600, allowStale: true });
        if (cachedProduct) {
            console.log(`üì¶ –¢–æ–≤–∞—Ä –Ω–∞–π–¥–µ–Ω –≤ –∫—ç—à–µ (–≤–æ–∑—Ä–∞—Å—Ç: ${cachedProduct.age}—Å)`);
            
            // –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            if (cachedProduct.isStale) {
                console.log('‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –æ–±–Ω–æ–≤–ª—è–µ–º –≤ —Ñ–æ–Ω–µ');
                chipdip.getProduct(url).catch(err => {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', err);
                });
            }
            
            return res.json({
                data: cachedProduct.data,
                timestamp: cachedProduct.timestamp,
                from_cache: true,
                age: cachedProduct.age
            });
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –≤ –∫—ç—à–µ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        const product = await chipdip.getProduct(url);
        if (!product) {
            return res.status(404).json({ error: '–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω' });
        }

        res.json({
            data: product,
            timestamp: new Date().toISOString()
        });

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).json({
            error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞',
            details: error.message
        });
    }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞
app.get('/product', async (req, res) => {
    try {
        const url = req.query.url;
        if (!url) {
            return res.redirect('/');
        }

        const product = await chipdip.getProduct(url);
        if (!product) {
            return res.status(404).send('–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const html = await template.render('product', product);
        res.send(html);

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ç–æ–≤–∞—Ä–∞');
    }
});

// –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞
app.get('/search', async (req, res) => {
    try {
        const query = req.query.q;
        if (!query) {
            return res.redirect('/');
        }

        const results = await chipdip.search(query);
        res.sendFile(path.join(__dirname, 'public', 'search.html'));

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞:', error);
        res.status(500).send('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞');
    }
});

// –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–µ–≥–æ –∫—ç—à–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(async () => {
    try {
        const stats = await db.getCacheStats();
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –¥–æ –æ—á–∏—Å—Ç–∫–∏:', stats);
        
        const deleted = await db.cleanup(3600); // 1 —á–∞—Å
        console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deleted} —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π`);
        
        const newStats = await db.getCacheStats();
        console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫—ç—à–∞ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:', newStats);
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∫—ç—à–∞:', error);
    }
}, 3600000); // –ö–∞–∂–¥—ã–π —á–∞—Å

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üì° –î–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://89.104.69.77:${PORT}`);
    console.log(`üåê –õ–æ–∫–∞–ª—å–Ω—ã–π –¥–æ—Å—Ç—É–ø: http://localhost:${PORT}`);
});
